#!/usr/bin/env node

var dns = require('native-dns');
var util = require('util');
var _ = require('lodash');
var path = require('path');
var fs = require('fs');

var argv = require('minimist')(process.argv.slice(2));

var defaults = {
  port: 1553
};

switch (argv._[0]) {
case 'server':
  var configPath = path.resolve(process.env.HOME, '.dennis.json');
  if (!fs.existsSync(configPath)) {
    console.log("Could not find config file at", configPath);
    process.exit(1);
  }
  var config = JSON.parse(fs.readFileSync(configPath));
  config = _.merge(defaults, config, argv);
  runServer(config);
  break;
case 'install':
  install();
  break;
default:
  printUsage();
  process.exit(1);
}

function printUsage() {
  if (argv._.length < 1 || argv._[0] == 'help') {
    console.log('Usage:');
    console.log(' ', path.basename(__filename), 'server');
    console.log(' ', path.basename(__filename), 'install');
    console.log(' ', path.basename(__filename), 'help');
  }
}

function install() {
  console.log("1) In order for me to load at login, put the below file contents in ~/Library/LaunchAgents/dennis.plist:");
  console.log("2) Then to start me right now: launchctl load ~/Library/LaunchAgents/dennis.plist\n");
  var template = fs.readFileSync(path.resolve(__dirname, '../config/plist.template'), 'utf-8');
  var replacements = {
    node: process.execPath,
    program: __filename,
    node_path: process.env.NODE_PATH
  };
  console.log(template.replace(/\{\{([^}]+)\}\}/g, function(s,m) { return replacements[m]; }));
}

function runServer(config) {
  var server = dns.createServer();
  server.on('request', function (request, response) {
    var start = Date.now();

    var requestedName = request.question[0].name;
    var targetDomain = config.default;

    for (suffix in config.domains) {
      if (requestedName.endsWith(suffix)) {
        targetDomain = config.domains[suffix];
        break;
      }
    }

    var question = _.clone(request.question[0], true);
    var req = dns.Request({
      question: question,
      server: {
        address: targetDomain.host,
        port: targetDomain.port || 53,
        type: targetDomain.proto || 'udp'
      },
      timeout: targetDomain.timeout || 1000
    });
    req.on('timeout', function () {
      console.log('Timeout in making request', question);
    });
    req.on('message', function (err, answer) {
      console.log(request.question[0].name, 'resolved to', answer.answer.length, 'hosts via', targetDomain.host);
      answer.answer.forEach(function (a) {
        response.answer.push(a);
      });
      response.send();
    });
    req.on('end', function () {
      var delta = (Date.now()) - start;
      console.log('Request done: ' + delta.toString() + 'ms');
    });
    req.send();
  });
  server.on('error', function (err, buff, req, res) {
    console.log(err.stack);
  });
  server.serve(config.port);
  console.log('Alive and kicking at port', config.port);
}
